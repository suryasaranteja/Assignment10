{"ast":null,"code":"export function groupBy(key) {\n  return function group(array) {\n    return array.reduce((acc, obj) => {\n      const property = obj[key];\n      const {\n        date,\n        ...rest\n      } = obj;\n      acc[property] = acc[property] || [];\n      acc[property].push(rest);\n      return acc;\n    }, {});\n  };\n}\nexport function getAverage(array, isRound = true) {\n  let average = 0;\n  if (isRound) {\n    average = Math.round(array.reduce((a, b) => a + b, 0) / array.length);\n    if (average === 0) {\n      average = 0;\n    }\n  } else average = (array.reduce((a, b) => a + b, 0) / array.length).toFixed(2);\n  return average;\n}\nexport function getMostFrequentWeather(arr) {\n  const hashmap = arr.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(hashmap).reduce((a, b) => hashmap[a] > hashmap[b] ? a : b);\n}\nexport const descriptionToIconName = (desc, descriptions_list) => {\n  let iconName = descriptions_list.find(item => item.description === desc);\n  return iconName.icon || 'unknown';\n};\nexport const getWeekForecastWeather = (response, descriptions_list) => {\n  let foreacast_data = [];\n  let descriptions_data = [];\n  if (!response || Object.keys(response).length === 0 || response.cod === '404') return [];else response === null || response === void 0 ? void 0 : response.list.slice().map((item, idx) => {\n    descriptions_data.push({\n      description: item.weather[0].description,\n      date: item.dt_txt.substring(0, 10)\n    });\n    foreacast_data.push({\n      date: item.dt_txt.substring(0, 10),\n      temp: item.main.temp,\n      humidity: item.main.humidity,\n      wind: item.wind.speed,\n      clouds: item.clouds.all\n    });\n    return {\n      idx,\n      item\n    };\n  });\n  const groupByDate = groupBy('date');\n  let grouped_forecast_data = groupByDate(foreacast_data);\n  let grouped_forecast_descriptions = groupByDate(descriptions_data);\n  const description_keys = Object.keys(grouped_forecast_descriptions);\n  let dayDescList = [];\n  description_keys.forEach(key => {\n    let singleDayDescriptions = grouped_forecast_descriptions[key].map(item => item.description);\n    let mostFrequentDescription = getMostFrequentWeather(singleDayDescriptions);\n    dayDescList.push(mostFrequentDescription);\n  });\n  const forecast_keys = Object.keys(grouped_forecast_data);\n  let dayAvgsList = [];\n  forecast_keys.forEach((key, idx) => {\n    let dayTempsList = [];\n    let dayHumidityList = [];\n    let dayWindList = [];\n    let dayCloudsList = [];\n    for (let i = 0; i < grouped_forecast_data[key].length; i++) {\n      dayTempsList.push(grouped_forecast_data[key][i].temp);\n      dayHumidityList.push(grouped_forecast_data[key][i].humidity);\n      dayWindList.push(grouped_forecast_data[key][i].wind);\n      dayCloudsList.push(grouped_forecast_data[key][i].clouds);\n    }\n    dayAvgsList.push({\n      date: key,\n      temp: getAverage(dayTempsList),\n      humidity: getAverage(dayHumidityList),\n      wind: getAverage(dayWindList, false),\n      clouds: getAverage(dayCloudsList),\n      description: dayDescList[idx],\n      icon: descriptionToIconName(dayDescList[idx], descriptions_list)\n    });\n  });\n  return dayAvgsList;\n};\nexport const getTodayForecastWeather = (response, current_date, current_datetime) => {\n  let all_today_forecasts = [];\n  if (!response || Object.keys(response).length === 0 || response.cod === '404') return [];else response === null || response === void 0 ? void 0 : response.list.slice().map(item => {\n    if (item.dt_txt.startsWith(current_date.substring(0, 10))) {\n      if (item.dt > current_datetime) {\n        all_today_forecasts.push({\n          time: item.dt_txt.split(' ')[1].substring(0, 5),\n          icon: item.weather[0].icon,\n          temperature: Math.round(item.main.temp) + ' °C'\n        });\n      }\n    }\n    return all_today_forecasts;\n  });\n  if (all_today_forecasts.length < 7) {\n    return [...all_today_forecasts];\n  } else {\n    return all_today_forecasts.slice(-6);\n  }\n};","map":{"version":3,"names":["groupBy","key","group","array","reduce","acc","obj","property","date","rest","push","getAverage","isRound","average","Math","round","a","b","length","toFixed","getMostFrequentWeather","arr","hashmap","val","Object","keys","descriptionToIconName","desc","descriptions_list","iconName","find","item","description","icon","getWeekForecastWeather","response","foreacast_data","descriptions_data","cod","list","slice","map","idx","weather","dt_txt","substring","temp","main","humidity","wind","speed","clouds","all","groupByDate","grouped_forecast_data","grouped_forecast_descriptions","description_keys","dayDescList","forEach","singleDayDescriptions","mostFrequentDescription","forecast_keys","dayAvgsList","dayTempsList","dayHumidityList","dayWindList","dayCloudsList","i","getTodayForecastWeather","current_date","current_datetime","all_today_forecasts","startsWith","dt","time","split","temperature"],"sources":["/Users/ramraju/Downloads/the-weather-forecasting-main/src/utilities/DataUtils.js"],"sourcesContent":["export function groupBy(key) {\n  return function group(array) {\n    return array.reduce((acc, obj) => {\n      const property = obj[key];\n      const { date, ...rest } = obj;\n      acc[property] = acc[property] || [];\n      acc[property].push(rest);\n      return acc;\n    }, {});\n  };\n}\n\nexport function getAverage(array, isRound = true) {\n  let average = 0;\n  if (isRound) {\n    average = Math.round(array.reduce((a, b) => a + b, 0) / array.length);\n    if (average === 0) {\n      average = 0;\n    }\n  } else average = (array.reduce((a, b) => a + b, 0) / array.length).toFixed(2);\n\n  return average;\n}\n\nexport function getMostFrequentWeather(arr) {\n  const hashmap = arr.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(hashmap).reduce((a, b) =>\n    hashmap[a] > hashmap[b] ? a : b\n  );\n}\n\nexport const descriptionToIconName = (desc, descriptions_list) => {\n  let iconName = descriptions_list.find((item) => item.description === desc);\n  return iconName.icon || 'unknown';\n};\n\nexport const getWeekForecastWeather = (response, descriptions_list) => {\n  let foreacast_data = [];\n  let descriptions_data = [];\n\n  if (!response || Object.keys(response).length === 0 || response.cod === '404')\n    return [];\n  else\n    response?.list.slice().map((item, idx) => {\n      descriptions_data.push({\n        description: item.weather[0].description,\n        date: item.dt_txt.substring(0, 10),\n      });\n      foreacast_data.push({\n        date: item.dt_txt.substring(0, 10),\n        temp: item.main.temp,\n        humidity: item.main.humidity,\n        wind: item.wind.speed,\n        clouds: item.clouds.all,\n      });\n\n      return { idx, item };\n    });\n\n  const groupByDate = groupBy('date');\n  let grouped_forecast_data = groupByDate(foreacast_data);\n  let grouped_forecast_descriptions = groupByDate(descriptions_data);\n\n  const description_keys = Object.keys(grouped_forecast_descriptions);\n\n  let dayDescList = [];\n\n  description_keys.forEach((key) => {\n    let singleDayDescriptions = grouped_forecast_descriptions[key].map(\n      (item) => item.description\n    );\n    let mostFrequentDescription = getMostFrequentWeather(singleDayDescriptions);\n    dayDescList.push(mostFrequentDescription);\n  });\n\n  const forecast_keys = Object.keys(grouped_forecast_data);\n  let dayAvgsList = [];\n\n  forecast_keys.forEach((key, idx) => {\n    let dayTempsList = [];\n    let dayHumidityList = [];\n    let dayWindList = [];\n    let dayCloudsList = [];\n\n    for (let i = 0; i < grouped_forecast_data[key].length; i++) {\n      dayTempsList.push(grouped_forecast_data[key][i].temp);\n      dayHumidityList.push(grouped_forecast_data[key][i].humidity);\n      dayWindList.push(grouped_forecast_data[key][i].wind);\n      dayCloudsList.push(grouped_forecast_data[key][i].clouds);\n    }\n\n    dayAvgsList.push({\n      date: key,\n      temp: getAverage(dayTempsList),\n      humidity: getAverage(dayHumidityList),\n      wind: getAverage(dayWindList, false),\n      clouds: getAverage(dayCloudsList),\n      description: dayDescList[idx],\n      icon: descriptionToIconName(dayDescList[idx], descriptions_list),\n    });\n  });\n\n  return dayAvgsList;\n};\n\nexport const getTodayForecastWeather = (\n  response,\n  current_date,\n  current_datetime\n) => {\n  let all_today_forecasts = [];\n\n  if (!response || Object.keys(response).length === 0 || response.cod === '404')\n    return [];\n  else\n    response?.list.slice().map((item) => {\n      if (item.dt_txt.startsWith(current_date.substring(0, 10))) {\n        if (item.dt > current_datetime) {\n          all_today_forecasts.push({\n            time: item.dt_txt.split(' ')[1].substring(0, 5),\n            icon: item.weather[0].icon,\n            temperature: Math.round(item.main.temp) + ' °C',\n          });\n        }\n      }\n      return all_today_forecasts;\n    });\n\n  if (all_today_forecasts.length < 7) {\n    return [...all_today_forecasts];\n  } else {\n    return all_today_forecasts.slice(-6);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}